&НаСервере
Перем мДерево, мУжеВСписке;

&НаСервере
Перем мКэшРеквизитовДокумента;

&НаКлиенте
Перем СтрокаПозиционированияПослеОбновления;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура вывода дерева структуры подчиненности документа.
//
Процедура ВывестиДеревоДокументов()
	
	Попытка
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		мДерево = ДеревоДокументов;
		мУжеВСписке = Новый Соответствие;
		мКэшРеквизитовДокумента = Новый Соответствие;
		
		ВывестиРодительскиеДокументы(ДокументСсылка);
		
		ВывестиПодчиненныеДокументы(мДерево);
		
		ТаблицаДокументов.Очистить();
		ТаблицаДокументовЗначение = РеквизитФормыВЗначение("ТаблицаДокументов");
		ДеревоДокументовЗначение = РеквизитФормыВЗначение("ДеревоДокументов");
		ДеревоЗначенийВТаблицуЗначений(ДеревоДокументовЗначение, ТаблицаДокументовЗначение);
		ЗначениеВРеквизитФормы(ТаблицаДокументовЗначение, "ТаблицаДокументов");
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
// Процедура выполняет вывод родительских документов.
//
Процедура ВывестиРодительскиеДокументы(ДокументСсылка)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				
				Если ЗначениеРеквизита <> Неопределено
					И НЕ ЗначениеРеквизита.Пустая()
					И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					И мУжеВСписке[ЗначениеРеквизита] = Неопределено
					И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено 
					И ЗначениеРеквизита <> ДокументСсылка Тогда
					
					Попытка
						
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						
					Исключение
						
						ОтладкаТекстОшибки = ОписаниеОшибки();
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
				
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						Попытка
							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						Исключение
							ОтладкаТекстОшибки = ОписаниеОшибки();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	СписокРеквизитов.СортироватьПоПредставлению();
	мУжеВСписке.Вставить(ДокументСсылка, Истина);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов);
	КонецЕсли;
	
	СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, #СуммаДокумента, #Организация, #Номер, #Комментарий, #Ответственный, #КаналПродаж,""" + МетаданныеДокумента.Имя + """ КАК Метаданные
						   | ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");    
		
	ИмяРеквизита = "СуммаДокумента";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "0 КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "0 КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;
	
	ИмяРеквизита = "Организация";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;
	
	ИмяРеквизита = "Ответственный";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;
	
	ИмяРеквизита = "КаналПродаж";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;


	Если Найти(МетаданныеДокумента.ПолноеИмя(),"Документ") > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
	КонецЕсли;
	
	ИмяРеквизита = "Комментарий";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка  = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаДерева.Ссылка = Выборка.Ссылка;
		СтрокаДерева.ДокументПредставление = Выборка.Представление;
		СтрокаДерева.ВидДокумента = Выборка.Метаданные;
		СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		СтрокаДерева.Картинка = ?(Выборка.Ссылка.Проведен, БиблиотекаКартинок.ЗаписатьИЗакрыть, ?(Выборка.Ссылка.ПометкаУдаления,БиблиотекаКартинок.ПометитьНаУдаление, БиблиотекаКартинок.Документ)); 
		СтрокаДерева.ПроведениеРазрешено = Выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		СтрокаДерева.Организация = Выборка.Организация; 
		СтрокаДерева.Номер = Выборка.Номер; 
		СтрокаДерева.Ответственный = Выборка.Ответственный;
		СтрокаДерева.КаналПродаж = Выборка.КаналПродаж;
	Иначе
		СтрокаДерева.Ссылка = ДокументСсылка;
		СтрокаДерева.ДокументПредставление = Строка(ДокументСсылка);
		СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		СтрокаДерева.Картинка = ?(Выборка.Ссылка.Проведен, БиблиотекаКартинок.ЗаписатьИЗакрыть, ?(Выборка.Ссылка.ПометкаУдаления,БиблиотекаКартинок.ПометитьНаУдаление, БиблиотекаКартинок.Документ));
		СтрокаДерева.ПроведениеРазрешено = ДокументСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		СтрокаДерева.Организация = Выборка.Организация;
		СтрокаДерева.Номер = Выборка.Номер; 
		СтрокаДерева.Ответственный = Выборка.Ответственный;
		СтрокаДерева.КаналПродаж = Выборка.КаналПродаж;
	КонецЕсли;
	
	мДерево = СтрокаДерева;
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет вывод родительских документов с ограничением по уровню в дереве.
//
Процедура ВывестиБезРодителей(СписокДокументов)
	
	мУжеВСписке = Новый Соответствие; 
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	мДерево = ДеревоДокументов;
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		
		МетаданныеДокумента = ЭлементСписка.Значение.Метаданные();
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, #СуммаДокумента, #Организация, #Номер, #Комментарий, #Ответственный, #КаналПродаж,  """ + МетаданныеДокумента.Имя + """ КАК Метаданные
		| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
				
		ИмяРеквизита = "СуммаДокумента";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "0 КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "0 КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;

		
		ИмяРеквизита = "Организация";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;


		ИмяРеквизита = "Ответственный";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;

ИмяРеквизита = "КаналПродаж";
	Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
		
		РазрешеноИспользование = Ложь;
		АвтоНастройка = Ложь;
		Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
			РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
			АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
		КонецЕсли;
		
		РеквизитСуществует = Ложь;
		Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
			РеквизитСуществует = Истина;
		ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
			РеквизитСуществует = Истина;
		КонецЕсли;
		
		Если РеквизитСуществует Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
		КонецЕсли;		
	КонецЕсли;

		Если МетаданныеДокумента.Реквизиты.Найти("Номер") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
		КонецЕсли;
		
		ИмяРеквизита = "Комментарий";
		Если Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ОбщРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
			АвтоИспользование = Строка(ОбщРеквизит.АвтоИспользование) <> "НеИспользовать";
			
			РазрешеноИспользование = Ложь;
			АвтоНастройка = Ложь;
			Если ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
				РазрешеноИспользование = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
				АвтоНастройка = Строка(ОбщРеквизит.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
			КонецЕсли;
			
			РеквизитСуществует = Ложь;
			Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
				РеквизитСуществует = Истина;
			ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
				РеквизитСуществует = Истина;
			КонецЕсли;
			
			Если РеквизитСуществует Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
			ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
			КонецЕсли;
		Иначе
			Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "" + ИмяРеквизита + " КАК " + ИмяРеквизита);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#" + ИмяРеквизита, "NULL КАК " + ИмяРеквизита);
			КонецЕсли;		
		КонецЕсли;

		
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		
		Выборка  = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
				СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
				СтрокаДерева.Ссылка= Выборка.Ссылка;
				СтрокаДерева.СуммаДокумента= Выборка.СуммаДокумента;
				СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
				СтрокаДерева.ДокументПредставление = Выборка.Представление;
				СтрокаДерева.ВидДокумента = Выборка.Метаданные;
				СтрокаДерева.Проведен = Выборка.Проведен;
				СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
				СтрокаДерева.ОграничениеПоРодителям = Истина;
				СтрокаДерева.Картинка = ?(Выборка.Ссылка.Проведен, БиблиотекаКартинок.ЗаписатьИЗакрыть, ?(Выборка.Ссылка.ПометкаУдаления,БиблиотекаКартинок.ПометитьНаУдаление, БиблиотекаКартинок.Документ));
				СтрокаДерева.Организация = Выборка.Организация; 
				СтрокаДерева.Номер = Выборка.Номер; 
				СтрокаДерева.Ответственный = Выборка.Ответственный;
				СтрокаДерева.КаналПродаж = Выборка.КаналПродаж;
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	мДерево = СтрокаДерева;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет вывод подчиненных документов.
//
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева)
	
	ТекущийДокумент = СтрокаДерева.Ссылка;
	Таблица = ПолучитьСписокПодчиненныхДокументов(ТекущийДокумент);
	КэшПоТипамДокументов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	Если КэшПоТипамДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
					|ВЫБРАТЬ ", "
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ") + "
					|Дата, Ссылка, Проведен, ПометкаУдаления, Представление,  """ + КлючИЗначение.Ключ + """ КАК Метаданные, #Номер   
					|ИЗ Документ." + КлючИЗначение.Ключ + "
					|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";  
							
		//Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"] Тогда		
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СуммаДокумента", "СуммаДокумента КАК СуммаДокумента");		
		//Иначе			
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СуммаДокумента", "0 КАК СуммаДокумента");			
		//КонецЕсли;
		//
		//Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Организация"] Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "Организация КАК Организация");
		//Иначе
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "NULL КАК Организация");
		//КонецЕсли;
		//		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Номер"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
		КонецЕсли;		
		//
		//Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Ответственный"] Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "Ответственный КАК Ответственный");
		//Иначе
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "NULL КАК Ответственный");
		//КонецЕсли;	
		//
		//Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["КаналПродаж"] Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КаналПродаж", "КаналПродаж КАК КаналПродаж");
		//Иначе
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КаналПродаж", "NULL КАК КаналПродаж");
		//КонецЕсли;	
		//
		//Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Комментарий"] Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Комментарий КАК Комментарий");
		//ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Тема"] Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", 
		//		"ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Тема) = ТИП(Справочник.ТемыСобытий) ТОГДА ВЫРАЗИТЬ(Тема КАК Справочник.ТемыСобытий).Наименование ИНАЧЕ ВЫРАЗИТЬ(Тема КАК СТРОКА) КОНЕЦ КАК Комментарий");
		//Иначе
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", """"" КАК Комментарий");
		//КонецЕсли;

		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			НоваяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			//НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента;
			//НоваяСтрока.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
			НоваяСтрока.ДокументПредставление = Выборка.Представление;
			НоваяСтрока.Проведен = Выборка.Проведен;
			НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
			НоваяСтрока.Картинка = ?(Выборка.Ссылка.Проведен, БиблиотекаКартинок.ЗаписатьИЗакрыть, ?(Выборка.Ссылка.ПометкаУдаления, БиблиотекаКартинок.ПометитьНаУдаление, БиблиотекаКартинок.Документ));
			мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеДокументы(НоваяСтрока);
			НоваяСтрока.ВидДокумента = Выборка.Метаданные;
			НоваяСтрока.ПроведениеРазрешено = Выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
			//НоваяСтрока.Организация = Выборка.Организация; 
			НоваяСтрока.Номер = Выборка.Номер; 
			//НоваяСтрока.Ответственный = Выборка.Ответственный;
			//НоваяСтрока.КаналПродаж = Выборка.КаналПродаж;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Процедура выполняет открытие формы текущего документа.
//                                                         
Процедура ОткрытьФормуДокумента()
	
	Попытка
		
		СтруктураОткрытия = Новый Структура("Ключ", Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		Форма = ПолучитьФорму("Документ." + Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента + ".ФормаОбъекта", СтруктураОткрытия);
		
		Если Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка = ДокументСсылка И Форма.Открыта() Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Документ уже открыт!'");
			Сообщение.Сообщить();
		КонецЕсли;
		
		Форма.Открыть();
		
	Исключение
		
		УчительскаяСервер.СообщитьОбОшибке(ДокументСсылка, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Функция выполняет поиск подчиненных документов текущего документа.
//
Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		Если НЕ ЭлементСостава.Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Если ТекстЗапроса<>"" Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе	
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция возвращает путь к объекту метаданных
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным) Экспорт
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = СтрНайти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл 
			
			Точка = СтрНайти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если Структура.ТипОбъекта = "Документ" Тогда
		Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
	Иначе
		Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // РазобратьПутьКОбъектуМетаданных()

&НаКлиенте
// Процедура закрывает форму с предупреждением.
//
Процедура ЗакрытьФормуСПредупреждением(ТекстПредупреждения)
	
	ВызватьИсключение ТекстПредупреждения;
	
КонецПроцедуры

&НаСервере
// Процедура дополняет кэш метаданных.
//
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента)
	
	РеквизитыДокумента = мКэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = Новый Соответствие;
		РеквизитыДокумента.Вставить("СуммаДокумента", МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокумента.Вставить("Комментарий", МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено);
		РеквизитыДокумента.Вставить("Тема", МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено);
		РеквизитыДокумента.Вставить("Организация", МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено); 
		РеквизитыДокумента.Вставить("Номер", МетаданныеДокумента.Реквизиты.Найти("Номер") <> Неопределено); 
		РеквизитыДокумента.Вставить("Ответственный", МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено); 
		
		Для Каждого ОбщРекв Из Метаданные.ОбщиеРеквизиты Цикл
			
			АвтоИспользование = Строка(ОбщРекв.АвтоИспользование) <> "НеИспользовать";
			
			РазрешеноИспользование = Ложь;
			АвтоНастройка = Ложь;
			Если ОбщРекв.Состав.Найти(МетаданныеДокумента.Имя) <> Неопределено Тогда
				РазрешеноИспользование = Строка(ОбщРекв.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Использовать";
				АвтоНастройка = Строка(ОбщРекв.Состав.Найти(МетаданныеДокумента.Имя).Использование) = "Автоматически";
			КонецЕсли;
			
			РеквизитСуществует = Ложь;
			Если АвтоИспользование И (РазрешеноИспользование ИЛИ АвтоНастройка) Тогда
				РеквизитСуществует = Истина;
			ИначеЕсли  НЕ АвтоИспользование И РазрешеноИспользование Тогда 
				РеквизитСуществует = Истина;
			КонецЕсли;
			
			Если РеквизитСуществует Тогда
				РеквизитыДокумента.Вставить(ОбщРекв.Имя, Истина); 
			Иначе
				РеквизитыДокумента.Вставить(ОбщРекв.Имя, Ложь);
			КонецЕсли;
			
			
		КонецЦикла;
		
		
		
		
		
		
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция проверяет доступность изменяемого документа.
//
Функция ОсновнойДокументЕщеДоступен()
	
	ИмяТекущегоДокумента = ДокументСсылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Представление ИЗ Документ." + ИмяТекущегоДокумента + " ГДЕ Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает номер картинки.
//
Функция НомерКартинки(СтрокаДерева)
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Возврат 3;
	ИначеЕсли СтрокаДерева.Проведен Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура обновляет доступность кнопок Провести и Отменить проведение.
//
Процедура ОбновитьДоступностьКнопок()
	
	ДанныеТекущейСтроки = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ЗначениеСвойства = Элементы.ДеревоДокументов.ТекущиеДанные.ПроведениеРазрешено;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Провести", "Доступность", ЗначениеСвойства);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтменаПроведения", "Доступность", ЗначениеСвойства);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоДокументовКонтекстноеМенюПровести", "Доступность", ЗначениеСвойства);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоДокументовКонтекстноеМенюОтменаПроведения", "Доступность", ЗначениеСвойства);
		
	Конецесли;

КонецПроцедуры 

&НаСервере
// Функция осуществляет проведение выбранного документа.
//
Функция ПровестиСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
	    Объект.Заблокировать();
		Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Объект.Разблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось провести документ %Документ%!'");
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Строка(Объект.Ссылка));
		Сообщение.Сообщить();
	КонецПопытки; 

	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере
// Функция осуществляет отмену проведения выбранного документа.
//
Функция ОтменаПроведенияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		Объект.Заблокировать();
		Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Объект.Разблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось отменить проведение документа %Документ%!'");
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Строка(Объект.Ссылка));
		Сообщение.Сообщить();
	КонецПопытки; 

	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере
// Функция устанавливает пометку на удаление выбранного документа.
//
Функция УстановитьПометкуУдаленияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		
		Объект.Заблокировать();
		Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
		Объект.Разблокировать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось установить пометку удаления на документ %Документ%!'");
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Строка(Объект.Ссылка));
		Сообщение.Сообщить();
		
	КонецПопытки; 

	Возврат Новый Структура("ПометкаУдаления, Проведен", ДокументСсылка.ПометкаУдаления, ДокументСсылка.Проведен);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция преобразует многострочную строку в однострочную.
//
Функция ПреобразоватьМногострочнуюСтроку(МногострочнаяСтрока)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МногострочнаяСтрока, Символы.ПС, Истина);
	Возврат СтрСоединить(МассивСтрок, " ");
	
КонецФункции

&НаСервере
// Функция преобразует дерево значений в таблицу значений.
//
Процедура ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура выводит все элементы дерева документов без иерархии.
//
Процедура ОтобразитьДокументыСписком()
	
	ВременнаяТаблицаДокументов = РеквизитФормыВЗначение("ТаблицаДокументов");
	МассивДокументов = ВременнаяТаблицаДокументов.ВыгрузитьКолонку("Ссылка");

	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	Если МассивДокументов.Количество()
		Тогда
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(МассивДокументов);
		
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		мДерево = ДеревоДокументов;
		мУжеВСписке = Новый Соответствие;
		
		ВывестиБезРодителей(СписокДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура рекурсивно сворачивает дерево значений.
//
Процедура СвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Свернуть(ИдентификаторСтроки);
		СвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура рекурсивно разворачивает дерево значений.
//
Процедура РазвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки);
		РазвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура осуществляет поиск строки по дереву документов.
//
Процедура НайтиАктивнуюСтроку(Дерево, ДокументСсылка)
	
		Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
			Если Элемент.Ссылка = ДокументСсылка
				Тогда
				СтрокаПозиционированияПослеОбновления = Элемент.ПолучитьИдентификатор();
				Прервать;
			Иначе
				НайтиАктивнуюСтроку(Элемент, ДокументСсылка); 
			КонецЕсли;
		КонецЦикла;

КонецПроцедуры 

&НаСервере
// Процедура устанавливает условное оформление формы
//
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоДокументов.Ссылка", ДокументСсылка, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовДокументПредставление.Имя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовСуммаДокумента.Имя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовОтветственный.Имя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовКаналПродаж.Имя);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элементы.ДеревоДокументовКомментарий.Имя);
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));

КонецПроцедуры

&НаКлиенте
//Процедура обновляет Дерево документов
//
Процедура ОбновитьДеревоДокументов()

	Если НЕ ПустаяСтрока(ЭтаФорма.СтрокаПоиска)
		Тогда
		УстановитьОтборСтрок(ЭтаФорма.СтрокаПоиска);
		Возврат;
	КонецЕсли;
	
	Если ОсновнойДокументЕщеДоступен() Тогда
		ТекущаяСсылкаНаДокумент = ?(НЕ Элементы.ДеревоДокументов.ТекущаяСтрока = Неопределено,Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка, Неопределено); 
		
		ВывестиДеревоДокументов(); 
		
		УчительскаяКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов); 
		
		НайденнаяСтрока = Неопределено; 
		
		Если Не ТекущаяСсылкаНаДокумент = Неопределено
			Тогда
			НайтиАктивнуюСтроку(ДеревоДокументов,ТекущаяСсылкаНаДокумент); 
			Элементы.ДеревоДокументов.ТекущаяСтрока = СтрокаПозиционированияПослеОбновления; 
			СтрокаПозиционированияПослеОбновления = Неопределено;
		КонецЕсли;
		
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
		|подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ДокументСсылка = Неопределено ИЛИ Параметры.ДокументСсылка.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ДокументСсылка = Параметры.ДокументСсылка; 
	
	ВывестиДеревоДокументов();

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	 
	Элементы.ДеревоДокументов.ТекущаяСтрока = ДеревоДокументов.ПолучитьЭлементы()[0];
	СтрокаПозиционированияПослеОбновления = Неопределено;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события Перед началом изменения табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)
	ОткрытьФормуДокумента();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Открыть.
//
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокумента();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Обновить.
//
Процедура Обновить(Команда)
	
	ОбновитьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия ВывестиДляТекущего.
//
Процедура ВывестиДляТекущего(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.СтрокаПоиска = "";
	
	ДокументСсылка = Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка;
	Если ОсновнойДокументЕщеДоступен() Тогда
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ВывестиДеревоДокументов();
		УчительскаяКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов); 
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
									 |подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия НайтиВСписке.
//
Процедура НайтиВСписке(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОткрытьФорму("Документ."+Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента + ".ФормаСписка", Новый Структура("ТекущаяСтрока", Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка));
	Исключение
		УчительскаяСервер.СообщитьОбОшибке(ДокументСсылка, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Провести.
//
Процедура Провести(Кнопка)
	
	Если Не Элементы.ДеревоДокументов.ВыделенныеСтроки.Количество()
		Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока из Элементы.ДеревоДокументов.ВыделенныеСтроки Цикл
		Попытка
			СтрокаДерева = Элементы.ДеревоДокументов.ДанныеСтроки(ВыделеннаяСтрока);
			СтрокаДерева.Проведен = ПровестиСервер(СтрокаДерева.Ссылка);
			//СтрокаДерева.Картинка = ?(СтрокаДерева.Ссылка.Проведен, БиблиотекаКартинок.ЗаписатьИЗакрыть, ?(СтрокаДерева.Ссылка.ПометкаУдаления,БиблиотекаКартинок.ПометитьНаУдаление, БиблиотекаКартинок.Документ));
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не удалось провести документ %Документ%!'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", СтрокаДерева.ДокументПредставление);
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
	ОбновитьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Отмена проведения.
//
Процедура ОтменаПроведения(Кнопка)
	
	Если Не Элементы.ДеревоДокументов.ВыделенныеСтроки.Количество()
		Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока из Элементы.ДеревоДокументов.ВыделенныеСтроки Цикл
		
		СтрокаДерева = Элементы.ДеревоДокументов.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если Не СтрокаДерева.Проведен Тогда Продолжить КонецЕсли;
		
		Попытка
			СтрокаДерева.Проведен = ОтменаПроведенияСервер(СтрокаДерева.Ссылка);
			//СтрокаДерева.Картинка = ?(СтрокаДерева.Ссылка.Проведен, БиблиотекаКартинок.ЗаписатьИЗакрыть, ?(СтрокаДерева.Ссылка.ПометкаУдаления,БиблиотекаКартинок.ПометитьНаУдаление, БиблиотекаКартинок.Документ));
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не удалось сделать непроведенным документ %Документ%!'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", СтрокаДерева.ДокументПредставление);
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
	ОбновитьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита ДеревоДокументов.
//
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	ОбновитьДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия УстановитьПометкуУдаления.
//
Процедура УстановитьПометкуУдаления(Кнопка)
	
	Если Не Элементы.ДеревоДокументов.ВыделенныеСтроки.Количество()
		Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока из Элементы.ДеревоДокументов.ВыделенныеСтроки Цикл
		Попытка
			СтрокаДерева = Элементы.ДеревоДокументов.ДанныеСтроки(ВыделеннаяСтрока);
			
			Результат = УстановитьПометкуУдаленияСервер(СтрокаДерева.Ссылка);
			СтрокаДерева.ПометкаУдаления = Результат.ПометкаУдаления;
			СтрокаДерева.Проведен = Результат.Проведен;
			//СтрокаДерева.Картинка = ?(СтрокаДерева.Ссылка.Проведен, БиблиотекаКартинок.ЗаписатьИЗакрыть, ?(СтрокаДерева.Ссылка.ПометкаУдаления,БиблиотекаКартинок.ПометитьНаУдаление, БиблиотекаКартинок.Документ));
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не удалось установить пометку удаления на документ %Документ%!'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", СтрокаДерева.ДокументПредставление);
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
	ОбновитьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Выбор дерева документов.
//
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = ложь;
	ОткрытьФормуДокумента();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события очистки поля поиска.
//
Процедура ПолеПоискаОчистка(Элемент, СтандартнаяОбработка)  
	ВывестиДеревоДокументов();
	УчительскаяКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов); 
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия свертывания строки дерева документов.
//
Процедура СвернутьВеткуДереваДокументов(Команда) 
	
	ТекущаяВетка = ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока);
	
	Если Не ТекущаяВетка = Неопределено
		Тогда
		СвернутьВеткуДерева(ТекущаяВетка);
		Элементы.ДеревоДокументов.Свернуть(Элементы.ДеревоДокументов.ТекущаяСтрока);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия развертывания строки дерева документов.
//
Процедура РазвернутьВеткуДереваДокументов(Команда) 
	
	РазвернутьВеткуДерева(ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока));
	Элементы.ДеревоДокументов.Развернуть(Элементы.ДеревоДокументов.ТекущаяСтрока);   

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия отражения документов списком.
//
Процедура ОтобразитьСписком(Команда) 
	ОтобразитьДокументыСписком();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия полного развертывания дерева документов.
//
Процедура РазвернутьДерево(Команда)
	УчительскаяКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия полного свертывания дерева документов.
//
Процедура СвенрнутьДерево(Команда)
	
	ЭлементыДереваДокументов = ДеревоДокументов.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева из ЭлементыДереваДокументов Цикл
		СвернутьВеткуДерева(ЭлементДерева);
		Элементы.ДеревоДокументов.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события изменения текста в строке поиска.
//
Процедура СтрокаПоискаПриИзменении(Элемент)
УстановитьОтборСтрок(ЭтаФорма.СтрокаПоиска);
КонецПроцедуры

#Область Поиск

&НаКлиенте
// Устанавливает отбор строк в зависимости от значения поля поиска
Процедура УстановитьОтборСтрок(ЗначениеПоиска)
	
	Если ПустаяСтрока(ЗначениеПоиска)
		Тогда 
		ВывестиДеревоДокументов(); 
		УчительскаяКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоДокументов,ДеревоДокументов);
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	
	ИскомоеЗначение = "" + ЗначениеПоиска;
	
	Если ПустаяСтрока(ИскомоеЗначение) Тогда
		Возврат;
	Иначе
		МассивПоиска =  ПолучитьМассивПоиска(СтрЗаменить(ИскомоеЗначение, ".", ","));
		Если НЕ МассивПоиска.Количество() = 0 Тогда
			Для Каждого ДанныеСтроки Из ЭтаФорма.ТаблицаДокументов Цикл
				ТекстПоиска = СтрЗаменить(ВРЕГ(""+
				ДанныеСтроки.ДокументПредставление + " "+
				ДанныеСтроки.Организация + " "+
				ДанныеСтроки.Номер + " " +
				ДанныеСтроки.Комментарий + " "+
				Формат(ДанныеСтроки.СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧГ=") + " "+
				""), ".", ",");
				
				ДанныеСтроки.Отбор = Истина;
				Для Каждого ПараПоиска Из МассивПоиска Цикл
					Если Найти(ТекстПоиска, ПараПоиска.ИсходноеЗначение) + Найти(ТекстПоиска, ПараПоиска.ИнвертированноеЗначение) = 0 Тогда
						ДанныеСтроки.Отбор = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДанныеСтроки.Отбор
					Тогда
					СписокДокументов.Добавить(ДанныеСтроки.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиБезРодителей(СписокДокументов);
	
КонецПроцедуры

&НаКлиенте
Функция ИнвертироватьСтроку(Строка)
	
	СтрокаКириллица = "йцукенгшщзхъфывапролджэячсмитьбю.ё";
	СтрокаЛатиница = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`";
	Результат = "";
	Строка = НРег(Строка);
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч, 1);
		Позиция = Найти(СтрокаЛатиница, Символ);
		Если Позиция <> 0 Тогда
			Результат = Результат + Сред(СтрокаКириллица, Позиция, 1);
		Иначе
			Позиция = Найти(СтрокаКириллица, Символ);
			Если Позиция <> 0 Тогда
				Результат = Результат + Сред(СтрокаЛатиница, Позиция, 1);
			Иначе
				Результат = Результат + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПоиска(Знач ИскомоеЗначение)
	
	Результат = Новый Массив;
	
	Если ИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"%"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"["," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"]"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"_"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,""""," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"¶"," ");
		ИскомоеЗначение = СокрЛП(ИскомоеЗначение);
		ИскомоеЗначение = ИскомоеЗначение;
		
		ИскомоеЗначение = ИскомоеЗначение + " ";
		Пока Найти(ИскомоеЗначение,"  ") <> 0 Цикл
			ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"  "," ");
		КонецЦикла;
		
		Позиция = Найти(ИскомоеЗначение," ");
		
		Пока Позиция <> 0 Цикл
			
			ИсходноеЗначение = Лев(ИскомоеЗначение,Позиция - 1);
			ИнвертированноеЗначение = ИнвертироватьСтроку(ИсходноеЗначение);
			
			Результат.Добавить(Новый Структура("ИсходноеЗначение,ИнвертированноеЗначение", ВРег(ИсходноеЗначение), ВРег(ИнвертированноеЗначение)));
			
			ИскомоеЗначение = Сред(ИскомоеЗначение, Позиция + 1);
			Позиция = Найти(ИскомоеЗначение," ");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти









