
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ИндивидуальноеЗанятие	= Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Преподаватель = ПараметрыСеанса.ТекущийПользователь;
		ПроверитьПараметрыИЗаполнитьФОрму();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УрокиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ИндивидуальноеЗанятие Тогда
		Если Объект.Уроки.Количество() = 1 Тогда
			Предупреждение("Для индивидуального занятия может быть только один ученик!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтобразитьСтатус();	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыИЗаполнитьФорму()
	
	Если ЗначениеЗаполнено(Параметры.ДлительностьЗанятия) ИЛИ ЗначениеЗаполнено(Параметры.Обучающийся) Тогда
		НовСтр = Объект.Уроки.Добавить();
		НовСтр.Обучающийся			= Параметры.Обучающийся;
		НовСтр.Длительность			= Параметры.ДлительностьЗанятия;
		НовСтр.ДатаНачала			= Параметры.ДатаНачалаЗанятия;
		НовСтр.Сумма				= РегистрыСведений.РасценкиЗанятий.ПолучитьЦенуЗанятия(Объект.Преподаватель, Параметры.ДлительностьЗанятия, Параметры.Обучающийся);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Дисциплина) Тогда
		Объект.Дисциплина = Параметры.Дисциплина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ДатаНачалаЗанятия) Тогда
		Объект.Дата = Параметры.ДатаНачалаЗанятия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтатус()

	СтатусЗанятия = ПолучитьСтатусЗанятия();
	Если СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Подтверждено") Тогда
		Элементы.СтатусЗанятия.ЦветТекста = WebЦвета.Оранжевый;
		ЭтаФорма.ТолькоПросмотр = Ложь;
	ИначеЕсли СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Отменено") Тогда 
		Элементы.СтатусЗанятия.ЦветТекста = WebЦвета.СеребристоСерый;
		ЭтаФорма.ТолькоПросмотр = Истина;
	ИначеЕсли СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.ПроведеноИОплачено") Тогда
		Элементы.СтатусЗанятия.ЦветТекста = WebЦвета.ЗеленыйЛес;
		ЭтаФорма.ТолькоПросмотр = Истина;
	ИначеЕсли СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Проведено") Тогда
		Элементы.СтатусЗанятия.ЦветТекста = WebЦвета.Синий;
		ЭтаФорма.ТолькоПросмотр = Истина;
	ИначеЕсли СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Оплачено") Тогда
		Элементы.СтатусЗанятия.ЦветТекста = WebЦвета.ЗеленыйЛес;
		ЭтаФорма.ТолькоПросмотр = Ложь;
	ИначеЕсли СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Перенесено") Тогда
		Элементы.СтатусЗанятия.ЦветТекста = WebЦвета.Малиновый;
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.грСтатусЗанятия.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.СтатусЗанятия.Заголовок = СтатусЗанятия;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусЗанятия()
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Перечисления.СтатусыЗанятий.НеПодтверждено;
	КонецЕсли;
	
		СтатусЗанятия = РегистрыСведений.СтатусыЗанятий.ПолучитьСтатусЗанятия(Объект.Ссылка);
		Возврат СтатусЗанятия;
КонецФункции
	
#Область РаботаСоСтатусом
&НаКлиенте
Процедура Отменить(Команда)
	Если объект.Ссылка.Пустая() Тогда
		Предупреждение("Необходимо провести документ");
	Возврат;
	КонецЕсли;
	ОтменитьНаСервере();
	ОтобразитьСтатус();
КонецПроцедуры

&НаСервере
Процедура ОтменитьНаСервере()
	
	Если Модифицированность Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	СтатусЗанятия = Перечисления.СтатусыЗанятий.Отменено;
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Объект.Ссылка, СтатусЗанятия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подтвердить(Команда)
	Если объект.Ссылка.Пустая() Тогда
		Предупреждение("Необходимо провести документ");
	Возврат;
	КонецЕсли;
	ПодтвердитьНаСервере();
	ОтобразитьСтатус();
КонецПроцедуры

&НаСервере
Процедура ПодтвердитьНаСервере()
	
	Если Модифицированность Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
		
	СтатусЗанятия = Перечисления.СтатусыЗанятий.Подтверждено;	
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Объект.Ссылка, СтатусЗанятия);
	
КонецПроцедуры

&НаКлиенте
Процедура Проведено(Команда)
	Если объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо провести документ");
	Возврат;
	КонецЕсли;
	ПроведеноНаСервере();
	ОтобразитьСтатус();
КонецПроцедуры

&НаСервере
Процедура ПроведеноНаСервере()
	
	Если Модифицированность Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;

	СтатусЗанятия = Перечисления.СтатусыЗанятий.Проведено;
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Объект.Ссылка, СтатусЗанятия);
	
КонецПроцедуры

&НаКлиенте
Процедура Оплачено(Команда)
	Если объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо провести документ");
	Возврат;
	КонецЕсли;
	ОплаченоНаСервере();
	ОтобразитьСтатус();
КонецПроцедуры

&НаСервере
Процедура ОплаченоНаСервере()
	
	Если Модифицированность Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	СтатусЗанятия = Перечисления.СтатусыЗанятий.Оплачено;
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Объект.Ссылка, СтатусЗанятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноИОплачено(Команда)
	Если объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо провести документ");
	Возврат;
	КонецЕсли;
	ПроведеноИОплаченоНаСервере();
	ОтобразитьСтатус();
КонецПроцедуры

&НаСервере
Процедура ПроведеноИОплаченоНаСервере()

	
	Если Модифицированность Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	СтатусЗанятия = Перечисления.СтатусыЗанятий.ПроведеноИОплачено;
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Объект.Ссылка, СтатусЗанятия);
	
КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура УрокиДатаНачалаПриИзменении(Элемент)
	ТекСтрока = Элементы.Уроки.ТекущиеДанные;
	Объект.Дата = ТекСтрока.ДатаНачала;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура УрокиДлительностьПриИзменении(Элемент)
	ТекСтрока = Элементы.Уроки.ТекущиеДанные;
	ЦенаЗанятия = ПолучитьЦенуЗанятия(ТекСтрока.Длительность, ТекСтрока.Обучающийся, Объект.Преподаватель);
	ТекСтрока.Сумма = ЦенаЗанятия;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуЗанятия(Длительность, Обучающийся, Преподаватель);
	Цена = РегистрыСведений.РасценкиЗанятий.ПолучитьЦенуЗанятия(Преподаватель, Длительность, Обучающийся);
	Возврат Цена;
КонецФункции

&НаКлиенте
Процедура ТемаУрокаОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.ТемаПреподователя.Пустая() Тогда Возврат; КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Ссылка = ПолучитьСсылкуНаТемуУрока();
	ПараметрыОткрытия = Новый Структура("Ключ", Ссылка);
	ОткрытьФорму("Справочник.ТемыПреподователей.Форма.ФормаЭлемента", ПараметрыОткрытия,ЭтаФорма,Объект.Ссылка,,,,РежимОткрытияОкнаФормы.Независимый)
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаТемуУрока()
	Возврат Объект.ТемаПреподователя.Ссылка;
КонецФункции

&НаКлиенте
Процедура ТемаПоУчебникуОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.ТемаПоУчебнику.Пустая() Тогда Возврат; КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Ссылка = ПолучитьСсылкуНаТемуУчебника();
	ПараметрыОткрытия = Новый Структура("Ключ", Ссылка);
	ОткрытьФорму("Справочник.ТемыПоУчебникам.Форма.ФормаЭлемента", ПараметрыОткрытия,ЭтаФорма,Объект.Ссылка,,,,РежимОткрытияОкнаФормы.Независимый)
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаТемуУчебника()
	Возврат Объект.ТемаПоУчебнику.Ссылка;
КонецФункции

&НаКлиенте
Процедура ПовторитьЗанятие(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтотОбъект.Модифицированность Тогда 
		Сообщить("Необходимо провести документ!"); 
		Возврат; 
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПовторитьЗанятиеЗавершение", ЭтаФорма);
	
	ПоказатьВводЗначения(ОписаниеОповещения, 
						 ПредопределенноеЗначение("Перечисление.ТипыПродленияЗанятий.ПустаяСсылка"),
						 "На какой срок продлить занятия?",
						 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПродленияЗанятий"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЗанятиеЗавершение(ТипПродления, ДополнительныеПараметры) Экспорт
	
	Если ТипПродления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПродлений = РаботаСДокументамиВызовСервера.ПолучитьКоличествоЗанятийПоТипуПродления(ТипПродления, Объект.Ссылка);
	
	Если КоличествоПродлений <= 0 Тогда 
		Сообщить("Занятия не были продлены (количество для продлений 0)"); 
		Возврат; 
	КонецЕсли;
	
	ТекстПредупреждения = РаботаСДокументамиВызовСервера.ПовторитьЗанятиеНаСервере(Объект.Ссылка, КоличествоПродлений);
	
	ПоказатьПредупреждение(, ТекстПредупреждения,,"Отчет о создании занятий");	
	
КонецПроцедуры

&НаКлиенте
Процедура Занятия(Команда)
	
	СтрПараметры = Новый Структура;
	
    ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ГрафикЗанятий", СтрПараметры);
    
    Отбор = Новый Структура;

		Если Объект.Уроки.Количество() = 1 Тогда
    		Отбор.Вставить("Ученик",Объект.Уроки[0].Обучающийся) ;
		Иначе
			СписокЗначений = Новый СписокЗначений;
			Для Каждого стрУрок из Объект.Уроки Цикл
				СписокЗначений.Добавить(стрУрок.Обучающийся);
			КонецЦикла;
			Отбор.Вставить("Ученик", СписокЗначений);
		КонецЕсли;
	
    
    ПараметрыФормы = Новый Структура("Отбор,ПользовательскиеНастройки", Отбор,ПользовательскиеНастройки);
    
    ОткрытьФорму("Отчет.ГрафикЗанятий.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма);

	
КонецПроцедуры

&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета,СтруктураПараметров)
	
    СтруктураНастроек = Новый Структура;
    ОтчетОбъект = Отчеты[ТипОтчета].Создать();
	
	СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;
	
	ВариантыОтчета = СхемаКД.ВариантыНастроек;
	
	СтруктураВариантов = Новый Структура;
	
	Для Каждого стрВариант из ВариантыОтчета Цикл
		СтруктураВариантов.Вставить(стрВариант.Имя, стрВариант.Настройки);
	КонецЦикла;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.ЗанятияУчеников);	
    ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
    Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
        Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
            Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
                Если строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
                    ПараметрСКД.Значение = ЭлПараметр.Значение;
                    ПараметрСКД.Использование = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;
        
    Возврат ПользовательскиеНастройки;
	
КонецФункции





