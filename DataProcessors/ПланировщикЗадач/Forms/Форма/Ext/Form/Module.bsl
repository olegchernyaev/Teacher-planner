
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачалоПериода	= НачалоНедели(ТекущаяДата());
	КонецПериода	= КонецНедели(ТекущаяДата());
	ЗаполнитьЭлементыПланировщика();
	
	////Расписание.ФиксироватьЗаголовокИзмерений				= Истина;
	//Расписание.ЦветФона									= WebЦвета.ШелковыйОттенок;
	//Расписание.ЦветЛиний									= WebЦвета.Васильковый;
	//Расписание.ЦветТекста								= WebЦвета.Черный;
	Расписание.ШкалаВремени.ЦветФона						= WebЦвета.Зеленый;
	Расписание.ШкалаВремени.ЦветТекста						= WebЦвета.Черный;
	Расписание.ШкалаВремени.ПрозрачныйФон					= ложь;
	Расписание.ЕдиницаПериодическогоВарианта				= ТипЕдиницыШкалыВремени.Час;
	Расписание.КратностьПериодическогоВарианта				= 24;
	
	ОтступСНачалаШкалы = Константы.ПланировщикЗадачВремяС.Получить();
	ОтступСКонцаШкалы = 24 - Константы.ПланировщикЗадачВремяПо.Получить();
	
	Расписание.ОтступСНачалаПереносаШкалыВремени			= ОтступСНачалаШкалы;
	Расписание.ОтступСКонцаПереносаШкалыВремени			= ОтступСКонцаШкалы;
	Расписание.ВыравниватьГраницыЭлементовПоШкалеВремени	= Ложь;
	//Расписание.АвтоМинимальнаяВысотаСтроки 				= Ложь;
	//Расписание.АвтоМинимальнаяШиринаКолонки 				= Ложь;
	//Расписание.МинимальнаяВысотаСтроки 					= 3;
	//Расписание.МинимальнаяШиринаКолонки 					= 10;
	Расписание.НачалоПериодаОтображения					= НачалоПериода;
	Расписание.КонецПериодаОтображения						= КонецПериода;
	Расписание.ФорматПеренесенныхЗаголовковШкалыВремени	= "ДФ='дддд, д ММММ'";
	Расписание.ТекущиеПериодыОтображения.Очистить();
	Расписание.ТекущиеПериодыОтображения.Добавить(НачалоПериода, КонецПериода);
	
	ВыводитьЗаголовок = Константы.ВыводитьЗаголовокПланировщикаЗадач.Получить();
	
	Если ВыводитьЗаголовок Тогда
		ОтображатьЗаголовок = Истина;
		Заголовок = "Расписание занятий " + ПредставлениеПериода(НачалоПериода, КонецПериода);
	Иначе
		ОтображатьЗаголовок = Ложь;
	КонецЕсли;
КонецПроцедуры

#Область РаботаСКнопкамиНачальнойСтраницы


&НаКлиенте
Процедура СписокОбучающихся(Команда)
	ОткрытьФорму("Справочник.Обучающиеся.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов(Команда)
	ОткрытьФорму("Обработка.КонсольЗапросов.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СписокЗанятий(Команда)
	ОткрытьФорму("Документ.Занятия.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ТемыЗанятий(Команда)
	ОткрытьФорму("Справочник.ТемыПреподователей.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ТемыПоУчебинкам(Команда)
	ОткрытьФорму("Справочник.ТемыПоУчебникам.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СписокРодителей(Команда)
	ОткрытьФорму("Справочник.РодителиОбучающихся.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура Пользователи(Команда)
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура УстановкаЦенЗанятий(Команда)
	ОткрытьФорму("Документ.УстановкаЦенЗанятий.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗанятий(Команда)
	Форма = ПолучитьФорму("Отчет.ГрафикЗанятий.Форма.ФормаОтчета");
	Форма.Открыть();
	//ОткрытьФорму("Отчет.ГрафикЗанятий.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура ПанельАдминистратора(Команда)
	ОткрытьФорму("Обработка.ПанельАдминистратора.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура Продажи(Команда)
	ОткрытьФорму("Отчет.Продажи.Форма.ФормаОтчета");
КонецПроцедуры

&НаКлиенте
Процедура СписокПросроченныхЗанятий(Команда)
	ОткрытьФорму("ОбщаяФорма.ЗанятияБезПодтверждения");
КонецПроцедуры

&НаКлиенте
Процедура Успеваемость(Команда)

КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ЗаполнитьЭлементыПланировщика()	
    Расписание.ТекущиеПериодыОтображения.Очистить();
	Расписание.ТекущиеПериодыОтображения.Добавить(НачалоПериода, КонецПериода);
	Заголовок = "Расписание занятий " + ПредставлениеПериода(НачалоПериода, КонецПериода); 
    ЭлементыПланировщика = Расписание.Элементы;
    ЭлементыПланировщика.Очистить();
	
	Запрос = Новый Запрос ("ВЫБРАТЬ
	                       |	ЕСТЬNULL(РасписаниеЗанятий.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
	                       |	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(РасписаниеЗанятий.Период, ДАТАВРЕМЯ(1, 1, 1)), МИНУТА, РасписаниеЗанятий.Длительность.ЗначениеМинут) КАК ДатаКонца,
	                       |	РасписаниеЗанятий.Регистратор.Ссылка КАК Занятие,
	                       |	РасписаниеЗанятий.Дисциплина,
	                       |	РасписаниеЗанятий.Обучающийся,
	                       |	ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) КАК СтатусЗанятия,
	                       |	ВЫБОР
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)
	                       |			ТОГДА ""ТусклоРозовый""
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Подтверждено)
	                       |			ТОГДА ""СветлоЗолотистый""
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.ПроведеноИОплачено)
	                       |			ТОГДА ""СветлоЗеленый""
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Отменено)
	                       |			ТОГДА ""СеребристоСерый""
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Перенесено)
	                       |			ТОГДА ""Белый""
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Проведено)
	                       |				ИЛИ ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Оплачено)
	                       |			ТОГДА ""Лазурный""
	                       |	КОНЕЦ КАК ЦветФона,
	                       |	ВЫБОР
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.ПроведеноИОплачено)
	                       |				ИЛИ ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Оплачено)
	                       |			ТОГДА ""Оплачено""
	                       |		КОГДА ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Отменено)
	                       |				ИЛИ ЕСТЬNULL(СтатусыЗанятий.СтатусЗанятия, ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.НеПодтверждено)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗанятий.Перенесено)
	                       |			ТОГДА ""Пустая""
	                       |		ИНАЧЕ ""НеОплачено""
	                       |	КОНЕЦ КАК Картинка
	                       |ИЗ
	                       |	РегистрСведений.РасписаниеЗанятий КАК РасписаниеЗанятий
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗанятий КАК СтатусыЗанятий
	                       |		ПО РасписаниеЗанятий.Регистратор = СтатусыЗанятий.Занятие
	                       |ГДЕ
	                       |	РасписаниеЗанятий.Период МЕЖДУ &НачалоПериода И &КонецПериода
	                       |	И РасписаниеЗанятий.Преподаватель = &Преподаватель");
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("Преподаватель",	ПараметрыСеанса.ТекущийПользователь);
	Результат = Запрос.Выполнить().Выгрузить();
	                                                        
	Для каждого СтрРезультат Из Результат Цикл
		
		НовыйЭлемент = ЭлементыПланировщика.Добавить(Формат(СтрРезультат.ДатаНачала,"ДЛФ=ДВ"),Формат(СтрРезультат.ДатаКонца,"ДЛФ=ДВ"));
		
		НовыйЭлемент.Текст		= "" + СтрРезультат.Обучающийся;
		//Если СтрРезультат.ДатаНачала < ТекущаяДата() И СтрРезультат.СтатусЗанятия = Перечисления.СтатусыЗанятий.Проведено Тогда
		//	НовыйЭлемент.ЦветФОна = WebЦвета.СветлоСерый;
		//КонецЕсли;
		НовыйЭлемент.ЦветФона	= WebЦвета[СтрРезультат.ЦветФона];
		НовыйЭлемент.Картинка	= БиблиотекаКартинок[СтрРезультат.Картинка];
		НовыйЭлемент.Значение	= СтрРезультат.Занятие;
		НовыйЭлемент.Шрифт		= ШрифтыСтиля.МелкийШрифтТекста;
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСмПланировщиком 

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СсылкаНаЗанятие = Элемент.ВыделенныеЭлементы[0].Значение;
	Если СсылкаНаЗанятие = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаЗанятие);
	ОткрытьФорму("Документ.Занятия.Форма.ФормаДокумента", ПараметрыФормы)
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	СоздатьЗанятиеНаКлиенте(Начало);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	ОтменаРедактирования = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВыбор(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СледующаяНеделя(Команда)	
	НачалоПериода	= НачалоПериода + 86400*7;
	КонецПериода	= КонецПериода + 86400*7;
	ЗаполнитьЭлементыПланировщика();	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяНеделя(Команда)
	НачалоПериода	= НачалоПериода - 86400*7;
	КонецПериода	= КонецПериода - 86400*7;
	ЗаполнитьЭлементыПланировщика();
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	НачалоПериода	= НачалоНедели(ТекущаяДата());
	КонецПериода	= КонецНедели(ТекущаяДата());
	ЗаполнитьЭлементыПланировщика();
КонецПроцедуры

//&НаКлиенте
//Процедура РасписаниеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
//	Отказ = Истина;
//	Возврат;
//КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗанятиеНаКлиенте(ДатаНачалаЗанятия)
	
	Ученик = Неопределено;
	Дисциплина = Неопределено;
	ДлительностьЗанятия = 0;
	Если Не ВвестиЗначение(Ученик,"Выберите ученика",Новый ОписаниеТипов("СправочникСсылка.Обучающиеся")) Тогда Возврат; КонецЕсли;
	Если Не ВвестиЗначение(Дисциплина,"Выберите дисциплину",Новый ОписаниеТипов("ПеречислениеСсылка.ДисциплиныЗанятий")) Тогда Возврат; КонецЕсли;
	Если Не ВвестиЗначение(ДлительностьЗанятия,"Укажите длительность занятия", Новый ОписаниеТипов("СправочникСсылка.ДлительностьЗанятий")) Тогда Возврат; КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Обучающийся, ДлительностьЗанятия, Дисциплина, ДатаНачалаЗанятия", Ученик, ДлительностьЗанятия, Дисциплина, ДатаНачалаЗанятия);
	Форма = ПолучитьФорму("Документ.Занятия.Форма.ФормаДокумента",ПараметрыФормы);
	Форма.ОткрытьМодально();
	
КонецПроцедуры

#Область РаботаСоСтатусом

&НаКлиенте
Процедура Проведено(Команда)
	Если Элементы.Расписание.ВыделенныеЭлементы.Количество() = 0 Тогда Возврат; Конецесли;
	Занятие = Элементы.Расписание.ВыделенныеЭлементы[0].Значение;
	СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Проведено");
	
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Занятие, СтатусЗанятия);
	
	ЗаполнитьЭлементыПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Подтвердить(Команда)
	
	Если Элементы.Расписание.ВыделенныеЭлементы.Количество() = 0 Тогда Возврат; Конецесли;
	Занятие = Элементы.Расписание.ВыделенныеЭлементы[0].Значение;
	СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Подтверждено");
	
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Занятие, СтатусЗанятия);
	
	ЗаполнитьЭлементыПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	Если Элементы.Расписание.ВыделенныеЭлементы.Количество() = 0 Тогда Возврат; Конецесли;
	
	ДатаНовогоЗанятия = Дата(1,1,1);
	Занятие = Элементы.Расписание.ВыделенныеЭлементы[0];
	СтатусЗанятия = ПолучитьСтатусЗанятия(Занятие.Значение);
	Продолжительность = Занятие.Конец - Занятие.Начало;
	
	Если СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Перенесено") Тогда 
		Предупреждение("Занятие уже было перенесено!");
		Возврат; 
	КонецЕсли;
	
	Если СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Проведено") Тогда
		Предупреждение("Нельзя переносить проведенные занятия!");
		Возврат;
	КонецЕсли;
		
	Если СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.ПроведеноИОплачено") Тогда
		Предупреждение("Занятие проведено и оплачено, перенос невозможен");
		Возврат;
	КонецЕсли;

	
	//Если Не Формат(ВвестиДату(ДатаНовогоЗанятия,"Введите новую дату для занятия"), "ДФ='dd.MM.yyyy hh:mm:ss'") Тогда Возврат КонецЕсли;
	ДатаНовогоЗанятия = ОткрытьФормуМодально("ОбщаяФорма.ВвестиДатуФормат");
	
	Если Не ЗначениеЗаполнено(ДатаНовогоЗанятия) Тогда Возврат; КонецЕсли;
	
	Преподаватель = ПолучитьПреподавателяЗанятия(Занятие.Значение);
	
	СообщениеОПересечении = РаботаСДокументамиВызовСервера.НайтиПересечениеВремениЗанятий(Занятие.Значение, ДатаНовогоЗанятия, ДатаНовогоЗанятия+Продолжительность, Преподаватель, Продолжительность);
	Если СообщениеОПересечении <> "" Тогда
	Предупреждение(СообщениеОПересечении);
	Возврат;
	КонецЕсли;
	//dev
	Ответ = Вопрос("Вы уверены, что хотите перенести занятие?" + Символы.ПС + "Новая дата занятия - " +
					Формат(ДатаНовогоЗанятия,"ДФ='dddd, dd MMM yyyy HH:mm:ss'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Внимание!");
	Если Ответ = КодВозвратаДиалога.Нет Тогда Возврат КонецЕсли;
	//dev
	
	СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Перенесено");
	
	ЕстьОплатаЗанятия = РаботаСДокументамиВызовСервера.ЕстьОплатаЗанятия(Занятие.Значение);
	
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Занятие.Значение, СтатусЗанятия);
	
	НовоеЗанятие = Неопределено;
	
	РаботаСДокументамиВызовСервера.СоздатьНовоеЗанятиеПоИсходному(Занятие.Значение, ДатаНовогоЗанятия, ЕстьОплатаЗанятия);
		
	ЗаполнитьЭлементыПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Если Элементы.Расписание.ВыделенныеЭлементы.Количество() = 0 Тогда Возврат; Конецесли;
	
	Занятие = Элементы.Расписание.ВыделенныеЭлементы[0].Значение;
	СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Отменено");
	
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Занятие, СтатусЗанятия);
	
	ЗаполнитьЭлементыПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьОплату(Команда)
	
	Если Элементы.Расписание.ВыделенныеЭлементы.Количество() = 0 Тогда Возврат; Конецесли;
	
	Занятие = Элементы.Расписание.ВыделенныеЭлементы[0].Значение;
	СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Оплачено");
	
	РаботаСДокументамиВызовСервера.СменитьСтатусЗанятия(Занятие, СтатусЗанятия);
	
	ЗаполнитьЭлементыПланировщика();
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСтатусЗанятия(Занятие)
	Возврат РегистрыСведений.СтатусыЗанятий.ПолучитьСтатусЗанятия(Занятие);	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьПреподавателяЗанятия(Занятие)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Занятия.Преподаватель
	                      |ИЗ
	                      |	Документ.Занятия КАК Занятия
	                      |ГДЕ
	                      |	Занятия.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Занятие);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Возврат Результат.Преподаватель;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РасписаниеОбработкаФормированияКоманд(Элемент, Параметры, Команды, КомандаПоУмолчанию)
	Если Элементы.Расписание.ВыделенныеЭлементы.Количество() = 0 Тогда
		Элементы.Расписание.КонтекстноеМеню.ПодчиненныеЭлементы.грРаботаСДокументом.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.Расписание.КонтекстноеМеню.ПодчиненныеЭлементы.грРаботаСДокументом.Доступность = Истина;
	КонецЕсли;
	
	Занятие = Элементы.Расписание.ВыделенныеЭлементы[0];
	СтатусЗанятия = ПолучитьСтатусЗанятия(Занятие.Значение);
	Если СтатусЗанятия = ПредопределенноеЗначение("Перечисление.СтатусыЗанятий.Перенесено") Тогда
		Элементы.Расписание.КонтекстноеМеню.ПодчиненныеЭлементы.грРаботаСДокументом.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЗанятие(Команда)
	
	//СообщениеОПересечении = РаботаСДокументамиВызовСервера.НайтиПересечениеВремениЗанятий(Занятие.Значение, ДатаНовогоЗанятия, ДатаНовогоЗанятия+Продолжительность, Преподаватель);

	//Если СообщениеОПересечении <> "" Тогда
	//	Ответ = Вопрос(СообщениеОПересечении + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Элементы.Расписание.ВыделенныеЭлементы.Количество() = 0 Тогда Возврат; Конецесли;
	Занятие = Элементы.Расписание.ВыделенныеЭлементы[0].Значение;
	
	ТипПродления = Неопределено;
	
	Если НЕ ВвестиЗначение(ТипПродления, "На какой срок продлить занятия?", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПродленияЗанятий")) Тогда Возврат; КонецЕсли;
	
	КоличествоПродлений = РаботаСДокументамиВызовСервера.ПолучитьКоличествоЗанятийПоТипуПродления(ТипПродления, Занятие);
	
	Если КоличествоПродлений <= 0 Тогда Сообщить("Занятия не были продлены (количество для продлений 0)"); Возврат; КонецЕсли;
	
	ТекстПредупреждения = РаботаСДокументамиВызовСервера.ПовторитьЗанятиеНаСервере(Занятие, КоличествоПродлений);
	
	ПоказатьПредупреждение(, ТекстПредупреждения,, "Отчет о создании занятий");
	
КонецПроцедуры

